/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/wjiec/programming_k8s/greeter/pkg/apis/greeter/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GreeterLister helps list Greeters.
// All objects returned here must be treated as read-only.
type GreeterLister interface {
	// List lists all Greeters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Greeter, err error)
	// Greeters returns an object that can list and get Greeters.
	Greeters(namespace string) GreeterNamespaceLister
	GreeterListerExpansion
}

// greeterLister implements the GreeterLister interface.
type greeterLister struct {
	indexer cache.Indexer
}

// NewGreeterLister returns a new GreeterLister.
func NewGreeterLister(indexer cache.Indexer) GreeterLister {
	return &greeterLister{indexer: indexer}
}

// List lists all Greeters in the indexer.
func (s *greeterLister) List(selector labels.Selector) (ret []*v1alpha1.Greeter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Greeter))
	})
	return ret, err
}

// Greeters returns an object that can list and get Greeters.
func (s *greeterLister) Greeters(namespace string) GreeterNamespaceLister {
	return greeterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GreeterNamespaceLister helps list and get Greeters.
// All objects returned here must be treated as read-only.
type GreeterNamespaceLister interface {
	// List lists all Greeters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Greeter, err error)
	// Get retrieves the Greeter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Greeter, error)
	GreeterNamespaceListerExpansion
}

// greeterNamespaceLister implements the GreeterNamespaceLister
// interface.
type greeterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Greeters in the indexer for a given namespace.
func (s greeterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Greeter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Greeter))
	})
	return ret, err
}

// Get retrieves the Greeter from the indexer for a given namespace and name.
func (s greeterNamespaceLister) Get(name string) (*v1alpha1.Greeter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("greeter"), name)
	}
	return obj.(*v1alpha1.Greeter), nil
}
